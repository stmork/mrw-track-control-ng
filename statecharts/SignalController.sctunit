//
//  SPDX-License-Identifier: MIT
//  SPDX-FileCopyrightText: Copyright (C) 2008-2023 Steffen A. Mork
//

package mrw.test

testclass SignalControllerTest for statechart mrw.^statechart.SignalControllerStatechart
{

	operation failState()
	{
		assert active (mrw.^statechart.SignalControllerStatechart.main_region.Failed)
		assert called fail
	}

	operation unlockedState()
	{
		assert active (mrw.^statechart.SignalControllerStatechart.main_region.Operating)
		assert active (mrw.^statechart.SignalControllerStatechart.main_region.Operating.Processing.Unlocked)
		assert called lock
	}

	@Test
	operation waitForStart()
	{
		enter
		assert  is_active
		assert !is_final
		assert active (mrw.^statechart.SignalControllerStatechart.main_region.Wait_for_Start)

		mock inc
		mock dec
		mock fail
		mock pending
		mock hasMainSignal returns (false)
		mock isLightSignal returns (false)
		mock isMainAndShunt returns (false)
		mock isTour returns (false)
		mock lock
	}

	@Test
	operation initial()
	{
		// Given
		waitForStart()

		// When
		raise start

		// Then
		assert active (mrw.^statechart.SignalControllerStatechart.main_region.Init)
		assert active (mrw.^statechart.SignalControllerStatechart.main_region.Init.Init_process.Turning)
		assert active (mrw.^statechart.SignalControllerStatechart.main_region.Init.Init_process.Turning.main.Turn)
		assert active (mrw.^statechart.SignalControllerStatechart.main_region.Init.Init_process.Turning.distant.Turn)
		assert active (mrw.^statechart.SignalControllerStatechart.main_region.Init.Init_process.Turning.shunt.Turn)
		assert turnMain
		assert turnDistant
		assert turnShunt
		assert called inc 1 times
		assert called dec 0 times
		assert called pending
	}

	@Test
	operation startVersion1()
	{
		// Given
		waitForStart()
		mock hasMainSignal returns (false)
		mock isMainAndShunt returns (true)

		// When
		raise start

		// Then
		assert turnMain
		assert turnDistant
		assert !turnShunt
		assert active (mrw.^statechart.SignalControllerStatechart.main_region.Init.Init_process.Turning.main.Turn)
		assert active (mrw.^statechart.SignalControllerStatechart.main_region.Init.Init_process.Turning.distant.Turn)
		assert active (mrw.^statechart.SignalControllerStatechart.main_region.Init.Init_process.Turning.shunt.Completed)
	}

	@Test
	operation startVersion2()
	{
		// Given
		waitForStart()
		mock hasMainSignal returns (true)
		mock isMainAndShunt returns (false)

		// When
		raise start

		// Then
		assert turnMain
		assert turnDistant
		assert turnShunt
		assert active (mrw.^statechart.SignalControllerStatechart.main_region.Init.Init_process.Turning.main.Turn)
		assert active (mrw.^statechart.SignalControllerStatechart.main_region.Init.Init_process.Turning.distant.Turn)
		assert active (mrw.^statechart.SignalControllerStatechart.main_region.Init.Init_process.Turning.shunt.Turn)
	}

	@Test
	operation failAfterStart()
	{
		// Given
		initial()

		// When
		raise failed

		// Then
		failState()
	}

	@Test
	operation timeoutAfterStart()
	{
		// Given
		initial()

		// When
		proceed timeout ms

		// Then
		failState()
	}

	@Test
	operation operationalVersion1()
	{
		// Given
		initial()
		mock hasMainSignal returns (false)
		mock isMainAndShunt returns (true)

		// When
		raise completedMain

		// Then
		assert active (mrw.^statechart.SignalControllerStatechart.main_region.Init.Init_process.Turning.main.Completed)
		assert active (mrw.^statechart.SignalControllerStatechart.main_region.Init.Init_process.Turning.distant.Turn)
		assert active (mrw.^statechart.SignalControllerStatechart.main_region.Init.Init_process.Turning.shunt.Turn)

		// When
		raise completedDistant

		// Then
		assert active (mrw.^statechart.SignalControllerStatechart.main_region.Init.Init_process.Turning.main.Completed)
		assert active (mrw.^statechart.SignalControllerStatechart.main_region.Init.Init_process.Turning.distant.Completed)
		assert active (mrw.^statechart.SignalControllerStatechart.main_region.Init.Init_process.Turning.shunt.Turn)

		// When
		raise completedShunt

		// Then
		assert started
		unlockedState()
	}

	@Test
	operation operationalVersion2()
	{
		// Given
		initial()
		mock hasMainSignal returns (true)
		mock isMainAndShunt returns (false)

		// When
		raise completedMain

		// Then
		assert active (mrw.^statechart.SignalControllerStatechart.main_region.Init.Init_process.Turning.main.Completed)
		assert active (mrw.^statechart.SignalControllerStatechart.main_region.Init.Init_process.Turning.distant.Turn)
		assert active (mrw.^statechart.SignalControllerStatechart.main_region.Init.Init_process.Turning.shunt.Turn)

		// When
		raise completedDistant

		// Then
		assert active (mrw.^statechart.SignalControllerStatechart.main_region.Init.Init_process.Turning.main.Completed)
		assert active (mrw.^statechart.SignalControllerStatechart.main_region.Init.Init_process.Turning.distant.Completed)
		assert active (mrw.^statechart.SignalControllerStatechart.main_region.Init.Init_process.Turning.shunt.Turn)

		// When
		raise completedShunt

		// Then
		assert started
		unlockedState()
	}

	@Test
	operation operational()
	{
		// Given
		initial()
		mock hasMainSignal  returns (false)
		mock isMainAndShunt returns (false)

		// When
		raise completedMain
		raise completedDistant
		raise completedShunt

		// Then
		assert started
		unlockedState()
	}

	@Test
	operation operationalCombined()
	{
		// Given
		initial()
		mock hasMainSignal  returns (true)
		mock isMainAndShunt returns (true)

		// When
		raise completedMain
		raise completedDistant
		raise completedShunt

		// Then
		unlockedState()
	}

	@Test
	operation restart()
	{
		// Given
		operational

		// When
		raise start

		// Then
		initial
	}

	@Test
	operation clearing()
	{
		// Given
		failAfterStart()

		// When
		raise clear

		// Then
		assert active (mrw.^statechart.SignalControllerStatechart.main_region.Wait_for_Start)
		assert cleared

		// When
		raise start

		// Then
		initial
	}

	@Test
	operation enableStop()
	{
		// Given
		operational()
		symbol = STOP

		// When
		raise enable

		// Then
		unlockedState()
	}

	@Test
	operation pendingTour()
	{
		// Given
		operational()
		symbol = GO
		mock isTour returns (true)

		// When
		raise enable

		// Then
		assert active (mrw.^statechart.SignalControllerStatechart.main_region.Operating.Processing.Pending)
		assert active (mrw.^statechart.SignalControllerStatechart.main_region.Operating.Processing.Pending.Pending.Go_Shunt)
		assert turnShunt
		assert valueof(turnShunt) == GO
		assert called pending 1 times
		assert called inc 1 times
		assert called dec 0 times

		// When
		raise completedShunt

		// Then
		assert active (mrw.^statechart.SignalControllerStatechart.main_region.Operating.Processing.Pending)
		assert active (mrw.^statechart.SignalControllerStatechart.main_region.Operating.Processing.Pending.Pending.Go_Main)
		assert turnMain
		assert valueof(turnMain) == GO

		// When
		raise completedMain

		// Then
		assert active (mrw.^statechart.SignalControllerStatechart.main_region.Operating.Processing.Pending)
		assert active (mrw.^statechart.SignalControllerStatechart.main_region.Operating.Processing.Pending.Pending.Go_Distant)
		assert turnDistant
		assert valueof(turnDistant) == GO
	}

	@Test
	operation pendingTourCombined()
	{
		// Given
		symbol = GO
		operationalCombined()
		mock isTour returns (true)
		mock isMainAndShunt returns (true)

		// When
		raise enable

		// Then
		assert active (mrw.^statechart.SignalControllerStatechart.main_region.Operating.Processing.Pending)
		assert active (mrw.^statechart.SignalControllerStatechart.main_region.Operating.Processing.Pending.Pending.Go_Main)
		assert turnMain
		assert valueof(turnMain) == GO
		assert called pending 1 times
		assert called inc 1 times
		assert called dec 0 times

		// When
		raise completedMain

		// Then
		assert active (mrw.^statechart.SignalControllerStatechart.main_region.Operating.Processing.Pending)
		assert active (mrw.^statechart.SignalControllerStatechart.main_region.Operating.Processing.Pending.Pending.Go_Distant)
		assert turnDistant
		assert valueof(turnDistant) == GO
	}

	@Test
	operation pendingShunting()
	{
		// Given
		symbol = GO
		operational()
		mock isTour returns (false)

		// When
		raise enable

		// Then
		assert active (mrw.^statechart.SignalControllerStatechart.main_region.Operating.Processing.Pending)
		assert active (mrw.^statechart.SignalControllerStatechart.main_region.Operating.Processing.Pending.Pending.Go_Shunt)
		assert turnShunt
		assert valueof(turnShunt) == GO
		assert called pending 1 times
		assert called inc 1 times
		assert called dec 0 times
	}

	@Test
	operation tourLocked()
	{
		// Given
		pendingTour()

		// When
		raise completedDistant

		// Then
		assert active (mrw.^statechart.SignalControllerStatechart.main_region.Operating.Processing.Tour_State)
		assert active (mrw.^statechart.SignalControllerStatechart.main_region.Operating.Processing.Tour_State.Processing.Idle)
		assert called inc 0 times
		assert called dec 1 times
		assert called lock 1 times
	}

	@Test
	operation tourLockedCombined()
	{
		// Given
		pendingTourCombined

		// When
		raise completedDistant

		// Then
		assert active (mrw.^statechart.SignalControllerStatechart.main_region.Operating.Processing.Tour_State)
		assert active (mrw.^statechart.SignalControllerStatechart.main_region.Operating.Processing.Tour_State.Processing.Idle)
		assert called inc 0 times
		assert called dec 1 times
		assert called lock 1 times
	}

	@Test
	operation shuntingLocked()
	{
		// Given
		pendingShunting()

		// When
		raise completedShunt

		// Then
		assert active (mrw.^statechart.SignalControllerStatechart.main_region.Operating.Processing.Shunting_State)
		assert active (mrw.^statechart.SignalControllerStatechart.main_region.Operating.Processing.Shunting_State.Processing.Idle)
		assert called inc 0 times
		assert called dec 1 times
		assert called lock 1 times
	}

	@Test
	operation disableTour()
	{
		// Given
		tourLocked()
		mock isMainAndShunt returns (false)
		mock isLightSignal returns (false)
		mock hasMainSignal returns (false)

		// When
		raise disable

		// Then
		assert symbol == STOP
		assert active (mrw.^statechart.SignalControllerStatechart.main_region.Operating.Processing.Tour_State)
		assert active (mrw.^statechart.SignalControllerStatechart.main_region.Operating.Processing.Tour_State.Processing.Waiting)
		assert active (mrw.^statechart.SignalControllerStatechart.main_region.Operating.Processing.Tour_State.Processing.Waiting.Tour_waiting.Stop_Shunt)
		assert turnShunt
		assert valueof(turnShunt) == STOP
		assert called inc 1 times
		assert called dec 0 times

		// When
		raise completedShunt

		// Then
		assert active (mrw.^statechart.SignalControllerStatechart.main_region.Operating.Processing.Tour_State)
		assert active (mrw.^statechart.SignalControllerStatechart.main_region.Operating.Processing.Tour_State.Processing.Waiting)
		assert active (mrw.^statechart.SignalControllerStatechart.main_region.Operating.Processing.Tour_State.Processing.Waiting.Tour_waiting.Stop_Main)
		assert turnMain
		assert valueof(turnMain) == STOP

		// When
		raise completedMain

		// Then
		assert active (mrw.^statechart.SignalControllerStatechart.main_region.Operating.Processing.Tour_State)
		assert active (mrw.^statechart.SignalControllerStatechart.main_region.Operating.Processing.Tour_State.Processing.Waiting)
		assert active (mrw.^statechart.SignalControllerStatechart.main_region.Operating.Processing.Tour_State.Processing.Waiting.Tour_waiting.Stop_Distant)
		assert turnDistant
		assert valueof(turnDistant) == STOP

		// When
		raise completedDistant

		// Then
		assert called inc 1 times
		assert called dec 1 times
		unlockedState()
	}

	@Test
	operation disableTourCombined()
	{
		// Given
		tourLockedCombined()
		mock isMainAndShunt returns (true)
		mock hasMainSignal returns (true)
		mock isLightSignal returns (false)

		// When
		raise disable

		// Then
		assert symbol == STOP
		assert active (mrw.^statechart.SignalControllerStatechart.main_region.Operating.Processing.Tour_State)
		assert active (mrw.^statechart.SignalControllerStatechart.main_region.Operating.Processing.Tour_State.Processing.Waiting)
		assert active (mrw.^statechart.SignalControllerStatechart.main_region.Operating.Processing.Tour_State.Processing.Waiting.Tour_waiting.Stop_Main)
		assert called inc 1 times
		assert called dec 0 times
		assert turnMain
		assert valueof(turnMain) == STOP
	}

	@Test
	operation disableTourCombinedCompleted()
	{
		// Given
		disableTourCombined()

		// When
		raise completedMain

		// Then
		assert symbol == STOP
		assert active (mrw.^statechart.SignalControllerStatechart.main_region.Operating.Processing.Tour_State)
		assert active (mrw.^statechart.SignalControllerStatechart.main_region.Operating.Processing.Tour_State.Processing.Waiting)
		assert active (mrw.^statechart.SignalControllerStatechart.main_region.Operating.Processing.Tour_State.Processing.Waiting.Tour_waiting.Stop_Distant)
		assert turnDistant
		assert valueof(turnDistant) == STOP
	}

	@Test
	operation disableTourCombinedLight()
	{
		// Given
		disableTourCombinedCompleted()
		mock isMainAndShunt returns (true)
		mock hasMainSignal returns (true)
		mock isLightSignal returns (true)

		// When
		raise completedDistant

		// Then
		assert active (mrw.^statechart.SignalControllerStatechart.main_region.Operating.Processing.Tour_State)
		assert active (mrw.^statechart.SignalControllerStatechart.main_region.Operating.Processing.Tour_State.Processing.Waiting)
		assert active (mrw.^statechart.SignalControllerStatechart.main_region.Operating.Processing.Tour_State.Processing.Waiting.Tour_waiting.Delay)

		// When
		proceed delay ms

		// Then
		assert active (mrw.^statechart.SignalControllerStatechart.main_region.Operating.Processing.Tour_State)
		assert active (mrw.^statechart.SignalControllerStatechart.main_region.Operating.Processing.Tour_State.Processing.Waiting)
		assert active (mrw.^statechart.SignalControllerStatechart.main_region.Operating.Processing.Tour_State.Processing.Waiting.Tour_waiting.Off_Distant)
		assert turnDistant
		assert valueof(turnDistant) == OFF

		// When
		raise completedDistant

		// Then
		assert called inc 0 times
		assert called dec 1 times
		unlockedState()
	}

	@Test
	operation disableTourCombinedForm()
	{
		// Given
		disableTourCombinedCompleted()
		mock isMainAndShunt returns (false)
		mock hasMainSignal returns (true)
		mock isLightSignal returns (false)

		// When
		raise completedDistant

		// Then
		assert called inc 0 times
		assert called dec 1 times
		unlockedState()
	}

	@Test
	operation disableShunting()
	{
		// Given
		shuntingLocked()

		// When
		raise disable

		// Then
		assert symbol == STOP
		assert active (mrw.^statechart.SignalControllerStatechart.main_region.Operating.Processing.Shunting_State.Processing.Waiting)
		assert active (mrw.^statechart.SignalControllerStatechart.main_region.Operating.Processing.Shunting_State.Processing.Waiting.Shunt_waiting.Stop)
		assert called inc 1 times
		assert called dec 0 times
		assert turnShunt
		assert valueof(turnShunt) == STOP
	}

	@Test
	operation disableShuntingCompleted()
	{
		// Given
		disableShunting()

		// When
		raise completedShunt

		// Then
		assert called dec 0 times
		assert called dec 1 times
		unlockedState
	}

	@Test
	operation extendTour()
	{
		// Given
		tourLocked()

		// When
		raise extend

		// Then
		assert active (mrw.^statechart.SignalControllerStatechart.main_region.Operating.Processing.Tour_State)
		assert active (mrw.^statechart.SignalControllerStatechart.main_region.Operating.Processing.Tour_State.Processing.Waiting)
		assert active (mrw.^statechart.SignalControllerStatechart.main_region.Operating.Processing.Tour_State.Processing.Waiting.Tour_waiting.Extend)
		assert called inc 1 times
		assert called dec 0 times
	}

	@Test
	operation extendTourCompleted()
	{
		// Given
		extendTour()

		// When
		raise completedDistant

		// Then
		assert active (mrw.^statechart.SignalControllerStatechart.main_region.Operating.Processing.Tour_State)
		assert active (mrw.^statechart.SignalControllerStatechart.main_region.Operating.Processing.Tour_State.Processing.Idle)
		assert called inc 0 times
		assert called dec 1 times
	}

	@Test
	operation extendTourCombined()
	{
		// Given
		tourLockedCombined()

		// When
		raise extend

		// Then
		assert active (mrw.^statechart.SignalControllerStatechart.main_region.Operating.Processing.Tour_State)
		assert active (mrw.^statechart.SignalControllerStatechart.main_region.Operating.Processing.Tour_State.Processing.Waiting)
		assert active (mrw.^statechart.SignalControllerStatechart.main_region.Operating.Processing.Tour_State.Processing.Waiting.Tour_waiting.Extend)
		assert called inc 1 times
		assert called dec 0 times
	}

	@Test
	operation extendTourCombinedCompleted()
	{
		// Given
		extendTourCombined()

		// When
		raise completedDistant

		// Then
		assert active (mrw.^statechart.SignalControllerStatechart.main_region.Operating.Processing.Tour_State)
		assert active (mrw.^statechart.SignalControllerStatechart.main_region.Operating.Processing.Tour_State.Processing.Idle)
		assert called inc 0 times
		assert called dec 1 times
	}

	@Test
	operation extendShunting()
	{
		// Given
		shuntingLocked()

		// When
		raise extend

		// Then
		assert active (mrw.^statechart.SignalControllerStatechart.main_region.Operating.Processing.Shunting_State)
		assert active (mrw.^statechart.SignalControllerStatechart.main_region.Operating.Processing.Shunting_State.Processing.Waiting)
		assert active (mrw.^statechart.SignalControllerStatechart.main_region.Operating.Processing.Shunting_State.Processing.Waiting.Shunt_waiting.Extend)
		assert called inc 1 times
		assert called dec 0 times
	}

	@Test
	operation extendShuntingCompleted()
	{
		// Given
		extendShunting()

		// When
		raise completedShunt

		// Then
		assert active (mrw.^statechart.SignalControllerStatechart.main_region.Operating.Processing.Shunting_State)
		assert active (mrw.^statechart.SignalControllerStatechart.main_region.Operating.Processing.Shunting_State.Processing.Idle)
		assert called inc 0 times
		assert called dec 1 times
	}

	@Test
	operation failedTour()
	{
		// Given
		tourLocked()

		// When
		raise failed

		// Then
		failState()
	}

	@Test
	operation failedTourCombined()
	{
		// Given
		tourLockedCombined()

		// When
		raise failed

		// Then
		failState()
	}

	@Test
	operation failedShunting()
	{
		// Given
		shuntingLocked()

		// When
		raise failed

		// Then
		failState()
	}

	@Test
	operation timeoutPendingToTour()
	{
		// Given
		pendingTour

		// When
		proceed timeout ms

		// Then
		failState()
	}

	@Test
	operation timeoutPendingToTourCombined()
	{
		// Given
		pendingTourCombined

		// When
		proceed timeout ms

		// Then
		failState()
	}

	@Test
	operation timeoutPendingToShunting()
	{
		// Given
		pendingShunting

		// When
		proceed timeout ms

		// Then
		failState()
	}

	@Test
	operation timeoutWaitingEnableTour()
	{
		// Given
		tourLocked

		// When
		raise extend

		// Then
		assert active (mrw.^statechart.SignalControllerStatechart.main_region.Operating.Processing.Tour_State.Processing.Waiting.Tour_waiting.Extend)
		assert called inc

		// When
		proceed timeout ms

		// Then
		assert called dec
		failState()
	}

	@Test
	operation timeoutWaitingEnableTourCombined()
	{
		// Given
		tourLockedCombined

		// When
		raise extend

		// Then
		assert active (mrw.^statechart.SignalControllerStatechart.main_region.Operating.Processing.Tour_State.Processing.Waiting.Tour_waiting.Extend)
		assert called inc

		// When
		proceed timeout ms

		// Then
		assert called dec
		failState()
	}

	@Test
	operation timeoutWaitingEnableShunting()
	{
		// Given
		shuntingLocked

		// When
		raise extend

		// Then
		assert active (mrw.^statechart.SignalControllerStatechart.main_region.Operating.Processing.Shunting_State.Processing.Waiting.Shunt_waiting.Extend)
		assert called inc

		// When
		proceed timeout ms

		// Then
		assert called dec
		failState()
	}

	@Test
	operation timeoutWaitingDisableTour()
	{
		// Given
		tourLocked

		// When
		raise disable

		// Then
		assert active (mrw.^statechart.SignalControllerStatechart.main_region.Operating.Processing.Tour_State.Processing.Waiting.Tour_waiting.Stop_Shunt)
		assert called inc

		// When
		proceed timeout ms

		// Then
		assert called dec
		failState()
	}

	@Test
	operation timeoutWaitingDisableTourCombined()
	{
		// Given
		tourLockedCombined
		mock isMainAndShunt returns (true)

		// When
		raise disable

		// Then
		assert active (mrw.^statechart.SignalControllerStatechart.main_region.Operating.Processing.Tour_State.Processing.Waiting.Tour_waiting.Stop_Main)
		assert called inc

		// When
		proceed timeout ms

		// Then
		assert called dec
		failState()
	}

	@Test
	operation timeoutWaitingDisableShunting()
	{
		// Given
		shuntingLocked

		// When
		raise disable

		// Then
		assert active (mrw.^statechart.SignalControllerStatechart.main_region.Operating.Processing.Shunting_State.Processing.Waiting.Shunt_waiting.Stop)
		assert called inc

		// When
		proceed timeout ms

		// Then
		assert called dec
		failState()
	}

	@Test
	operation doExit()
	{
		enter
		assert is_active

		exit
		assert !is_active

		waitForStart()
		exit
		assert !is_active

		startVersion1()
		exit
		assert !is_active

		startVersion2()
		exit
		assert !is_active

		initial()
		exit
		assert !is_active

		operational()
		exit
		assert !is_active

		pendingShunting()
		exit
		assert !is_active

		pendingTour()
		exit
		assert !is_active

		pendingTourCombined()
		exit
		assert !is_active

		tourLocked()
		exit
		assert !is_active

		tourLockedCombined()
		exit
		assert !is_active

		shuntingLocked()
		exit
		assert !is_active

		extendTour()
		exit
		assert !is_active

		extendTourCompleted()
		exit
		assert !is_active

		extendTourCombined()
		exit
		assert !is_active

		extendTourCombinedCompleted()
		exit
		assert !is_active

		extendShunting()
		exit
		assert !is_active

		extendShuntingCompleted()
		exit
		assert !is_active

		disableTour()
		exit
		assert !is_active

		disableTourCombined()
		exit
		assert !is_active

		disableTourCombinedCompleted()
		exit
		assert !is_active

		disableTourCombinedLight()
		exit
		assert !is_active

		disableTourCombinedForm()
		exit
		assert !is_active

		disableShunting()
		exit
		assert !is_active

		disableShuntingCompleted()
		exit
		assert !is_active

		failAfterStart()
		exit
		assert !is_active

		failedTour
		exit
		assert !is_active

		failedTourCombined
		exit
		assert !is_active

		failedShunting
		exit
		assert !is_active
	}
}
