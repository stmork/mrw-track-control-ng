//
//  SPDX-License-Identifier: MIT
//  SPDX-FileCopyrightText: Copyright (C) 2008-2023 Steffen A. Mork
//

testclass SignalTest for statechart mrw.^statechart.SignalStatechart
{
	operation failState()
	{
		assert active (mrw.^statechart.SignalStatechart.main_region.Fail)
		assert symbol == OFF
		assert called prepare
		assert called send
		assert failed
	}

	@Test
	operation idle()
	{
		enter
		assert  is_active
		assert !is_final
		assert active (mrw.^statechart.SignalStatechart.main_region.Idle)
		assert symbol == STOP

		mock hasSignal returns (true)
		mock prepare returns (true)
		mock send
		mock dump
	}

	@Test
	operation failWithSignal()
	{
		// Given
		idle()
		mock hasSignal returns (true)

		// When
		raise fail

		// Then
		failState
	}

	@Test
	operation failWithoutSignal()
	{
		// Given
		idle()
		mock hasSignal returns (false)

		// When
		raise fail

		// Then
		assert active (mrw.^statechart.SignalStatechart.main_region.Idle)
	}

	@Test
	operation turnWithoutSignal()
	{
		// Given
		idle()
		mock hasSignal returns (false)

		// When
		raise turn : GO

		// Then
		assert active (mrw.^statechart.SignalStatechart.main_region.Idle)
		assert symbol == STOP
		assert !called prepare
	}

	@Test
	operation turning()
	{
		// Given
		idle()
		mock hasSignal returns (true)
		mock prepare returns (true)

		// When
		raise turn : GO

		// Then
		assert active (mrw.^statechart.SignalStatechart.main_region.Turning)
		assert active (mrw.^statechart.SignalStatechart.main_region.Turning.Turn_processing.Send)
		assert symbol == GO
		assert called prepare
		assert called send
	}

	@Test
	operation turningNoChange()
	{
		// Given
		idle()
		mock prepare returns (false)

		// When
		raise turn : STOP

		// Then
		assert active (mrw.^statechart.SignalStatechart.main_region.Idle)
		assert symbol == STOP
	}

	@Test
	operation pending()
	{
		// Given
		turning()

		// When
		raise queued

		// Then
		assert active (mrw.^statechart.SignalStatechart.main_region.Turning)
		assert active (mrw.^statechart.SignalStatechart.main_region.Turning.Turn_processing.Pending)
	}

	@Test
	operation turnCompleted()
	{
		// Given
		turning()

		// When
		raise ok

		// Then
		assert active (mrw.^statechart.SignalStatechart.main_region.Idle)
		assert completed
	}

	@Test
	operation turningNoExtend()
	{
		// Given
		turnCompleted()
		mock prepare returns (false)

		// When
		raise turn : GO

		// Then
		assert active (mrw.^statechart.SignalStatechart.main_region.Idle)
		assert symbol == GO
	}

	@Test
	operation turnCompletedAfterPending()
	{
		// Given
		pending()

		// When
		raise ok

		// Then
		assert active (mrw.^statechart.SignalStatechart.main_region.Idle)
		assert completed
	}

	@Test
	operation failSending()
	{
		// Given
		turning()

		// When
		raise fail

		// Then
		failState()
	}

	@Test
	operation failPending()
	{
		// Given
		pending()

		// When
		raise fail

		// Then
		failState()
	}

	@Test
	operation timeoutSending()
	{
		// Given
		turning()

		// When
		proceed timeout ms

		// Then
		failState()
	}

	@Test
	operation timeoutPending()
	{
		// Given
		pending()

		// When
		proceed timeout ms

		// Then
		failState()
	}

	@Test
	operation clearing()
	{
		// Given
		failSending

		// When
		raise clear

		// Then
		assert active (mrw.^statechart.SignalStatechart.main_region.Idle)
	}

	@Test
	operation doExit()
	{
		enter
		assert is_active

		exit
		assert !is_active

		idle()
		exit
		assert !is_active

		turning()
		exit
		assert !is_active

		pending()
		exit
		assert !is_active

		failSending()
		exit
		assert !is_active
	}
}
