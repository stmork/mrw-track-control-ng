//
//  SPDX-License-Identifier: MIT
//  SPDX-FileCopyrightText: Copyright (C) 2008-2023 Steffen A. Mork
//

testclass OperatingModeTest for statechart mrw.^statechart.OperatingMode
{
	@Test
	operation wait()
	{
		enter
		assert  is_active
		assert !is_final
		assert active (mrw.^statechart.OperatingMode.main_region.Prepare_Bus)
		assert called can.connectBus
	}

	@Test
	operation timeoutAfterWait()
	{
		// Given
		wait()

		// When
		proceed timeout ms

		// Then
		assert active (mrw.^statechart.OperatingMode.main_region.Failed)
		assert failing
	}

	@Test
	operation initial()
	{
		// Given
		wait()

		// When
		raise can.connected

		// Then
		assert active (mrw.^statechart.OperatingMode.main_region.Init)
		assert called resetTransaction
		assert start
	}

	@Test
	operation failAfterStart()
	{
		// Given
		initial()

		// When
		raise failed

		// Then
		assert active (mrw.^statechart.OperatingMode.main_region.Failed)
		assert failing
	}

	@Test
	operation timeoutAfterStart()
	{
		// Given
		initial()

		// When
		proceed timeout ms

		// Then
		assert active (mrw.^statechart.OperatingMode.main_region.Failed)
		assert failing
	}

	@Test
	operation clearFailState()
	{
		// Given
		failAfterStart()
		mock can.isConnected returns(true)

		// When
		raise clear

		// Then
		assert active (mrw.^statechart.OperatingMode.main_region.Init)
		assert cleared
		assert called resetTransaction
		assert start
	}

	@Test
	operation stayFailState()
	{
		// Given
		failAfterStart()
		mock can.isConnected returns(false)

		// When
		raise clear

		// Then
		assert active (mrw.^statechart.OperatingMode.main_region.Failed)
	}

	@Test
	operation editFailed()
	{
		// Given
		failAfterStart()

		// When
		raise edit

		// Then
		assert active (mrw.^statechart.OperatingMode.main_region.Editing)
		assert cleared
		assert editing
		assert valueof(editing) == true
	}

	@Test
	operation doOperating()
	{
		// Given
		initial()

		// When
		raise started

		// Then
		assert active (mrw.^statechart.OperatingMode.main_region.Operating)
		assert operating
		assert valueof(operating) == true
	}

	@Test
	operation failWhileOperating()
	{
		// Given
		doOperating()

		// When
		raise failed

		// Then
		assert active (mrw.^statechart.OperatingMode.main_region.Operating)
	}

	@Test
	operation resetWhileOperating()
	{
		// Given
		doOperating()

		// When
		raise init

		// Then
		assert active (mrw.^statechart.OperatingMode.main_region.Init)
		assert operating
		assert valueof(operating) == false
		assert called resetTransaction
		assert start
	}

	@Test
	operation doEdit()
	{
		// Given
		doOperating()

		// When
		raise edit

		// Then
		assert active (mrw.^statechart.OperatingMode.main_region.Editing)
		assert operating
		assert valueof(operating) == false
		assert editing
		assert valueof(editing) == true
	}

	@Test
	operation operateAfterEdit()
	{
		// Given
		doEdit()

		// When
		raise operate

		// Then
		assert active (mrw.^statechart.OperatingMode.main_region.Operating)
		assert editing
		assert valueof(editing) == false
		assert operating
		assert valueof(operating) == true
	}
}
