//
//  SPDX-License-Identifier: MIT
//  SPDX-FileCopyrightText: Copyright (C) 2008-2023 Steffen A. Mork
//

package mrw.test

testclass UpdateTest for statechart mrw.^statechart.UpdateStatechart
{
	@Test
	operation doStart()
	{
		enter
		assert  is_active
		assert !is_final
		assert active (mrw.^statechart.UpdateStatechart.main_region.Wait_for_Connect)

		mock init
		mock ping
		mock boot
		mock flashRequest
		mock flashCompletePage
		mock flashRestPage
		mock flashCheck
		mock hasController returns (true)
		mock hasPages returns (true)
	}

	@Test
	operation timeoutConnect()
	{
		// Given
		doStart()

		// When
		proceed timeout ms

		// Then
		assert active (mrw.^statechart.UpdateStatechart.main_region.Failed)
		assert error == 7
		assert called fail
	}

	@Test
	operation doPing()
	{
		doStart()

		// When
		raise connected

		// Then
		assert active (mrw.^statechart.UpdateStatechart.main_region.Ping)
		assert called ping
	}

	@Test
	operation doReset()
	{
		// Given
		doPing()
		mock hasController returns (true)

		// When
		proceed timeout ms

		// Then
		assert active (mrw.^statechart.UpdateStatechart.main_region.Reset)
		assert called init
		assert called boot
	}

	@Test
	operation failPing()
	{
		// Given
		doPing()
		mock hasController returns (false)

		// When
		proceed timeout ms

		// Then
		assert active (mrw.^statechart.UpdateStatechart.main_region.Failed)
		assert error == 1
		assert called fail
	}

	@Test
	operation doWait()
	{
		// Given
		doReset()

		// When
		raise complete

		// Then
		assert active (mrw.^statechart.UpdateStatechart.main_region.Wait_Bootloader)
		assert count == 0
	}

	@Test
	operation failWait()
	{
		// Given
		doReset()

		// When
		proceed delay_boot ms

		// Then
		assert active (mrw.^statechart.UpdateStatechart.main_region.Failed)
		assert error == 2
		assert called fail
	}

	@Test
	operation firstFlashRequest()
	{
		// Given
		doWait

		// When
		proceed delay_reset ms

		// Then
		assert active (mrw.^statechart.UpdateStatechart.main_region.Flash_Request)
		assert called init
		assert called flashRequest
		assert count == 0
	}

	@Test
	operation flashRequested()
	{
		// Given
		firstFlashRequest
		mock hasPages returns (true)

		// When
		raise complete

		// Then
		assert active (mrw.^statechart.UpdateStatechart.main_region.Flash_Complete_Page)
	}

	@Test
	operation lastFlashRequest()
	{
		// Given
		firstFlashRequest()
		mock hasPages returns (true)

		// When
		var i = 0
		while (i < retry)
		{
			assert i == count
			assert active (mrw.^statechart.UpdateStatechart.main_region.Flash_Request)

			proceed delay_flash_request ms
			i++
		}

		// Then
		assert count == retry
	}

	@Test
	operation noCompletePage()
	{
		// Given
		lastFlashRequest()
		mock hasPages returns (false)

		// When
		proceed delay_flash_request ms

		// Then
		assert active (mrw.^statechart.UpdateStatechart.main_region.Failed)
		assert error == 6
		assert called fail
	}

	@Test
	operation firstCompletePage()
	{
		// Given
		flashRequested()
		mock hasPages returns (true)

		// When
		proceed delay_flash_page ms

		// Then
		assert active (mrw.^statechart.UpdateStatechart.main_region.Flash_Complete_Page)
		assert called hasPages
		assert called flashCompletePage
	}

	@Test
	operation nextCompletePage()
	{
		// Given
		firstCompletePage()
		mock hasPages returns (true)

		// When
		proceed delay_flash_page ms

		// Then
		assert active (mrw.^statechart.UpdateStatechart.main_region.Flash_Complete_Page)
		assert called hasPages
		assert called flashCompletePage
	}

	@Test
	operation lastCompletePage()
	{
		// Given
		nextCompletePage()
		mock hasPages returns (false)

		// When
		proceed delay_flash_page ms

		// Then
		assert active (mrw.^statechart.UpdateStatechart.main_region.Flash_Rest)
		assert called hasPages
		assert called flashRestPage
	}

	@Test
	operation doFlashCheck()
	{
		// Given
		lastCompletePage()

		// When
		proceed delay_flash_page ms

		// Then
		assert active (mrw.^statechart.UpdateStatechart.main_region.Flash_Check)
		assert called init
		assert called flashCheck
	}

	@Test
	operation booted()
	{
		// Given
		doFlashCheck()

		// When
		raise complete

		// Then
		assert active(mrw.^statechart.UpdateStatechart.main_region.Booted)
		assert called quit
	}

	@Test
	operation failFlashCheck()
	{
		// Given
		doFlashCheck

		// When
		raise failed

		// Then
		assert active (mrw.^statechart.UpdateStatechart.main_region.Failed)
		assert error == 3
		assert called fail
	}

	@Test
	operation timeoutFlashCheck()
	{
		// Given
		doFlashCheck

		// When
		proceed delay_boot ms

		// Then
		assert active (mrw.^statechart.UpdateStatechart.main_region.Failed)
		assert error == 4
		assert called fail
	}

	@Test
	operation doExit()
	{
		enter
		assert is_active

		exit
		assert !is_active

		doStart()
		exit
		assert !is_active

		doPing()
		exit
		assert !is_active

		doReset()
		exit
		assert !is_active

		doWait()
		exit
		assert !is_active

		firstFlashRequest()
		exit
		assert !is_active

		flashRequested()
		exit
		assert !is_active

		lastCompletePage()
		exit
		assert !is_active

		doFlashCheck()
		exit
		assert !is_active

		booted()
		exit
		assert !is_active

		failPing()
		exit
		assert !is_active
	}
}
