//
//  SPDX-License-Identifier: MIT
//  SPDX-FileCopyrightText: Copyright (C) 2022 Steffen A. Mork
//

testclass Route for statechart mrw.^statechart.RouteStatechart
{
	operation disabled()
	{
		assert active (mrw.^statechart.RouteStatechart.main_region.Disable)
		assert called reset()
		assert called deactivateSections()
		assert called unlockSignals()
		assert called unlockSwitches()
	}

	@Test
	operation start()
	{
		enter
		assert is_active
		assert active (mrw.^statechart.RouteStatechart.main_region.Start)
	}

	@Test
	operation switches()
	{
		// Given
		start()

		// When
		raise extended

		// Then
		assert active (mrw.^statechart.RouteStatechart.main_region.Turning)
		assert active (mrw.^statechart.RouteStatechart.main_region.Turning.Turning_process.Switch_Turning)
		assert called reset()
		assert called turnSwitches()
	}

	@Test
	operation turningSignals()
	{
		// Given
		switches()

		// When
		raise completed

		// Then
		assert active (mrw.^statechart.RouteStatechart.main_region.Turning)
		assert active (mrw.^statechart.RouteStatechart.main_region.Turning.Turning_process.Signal_Turning)
		assert called reset()
		assert called turnSignals()
	}

	@Test
	operation sections()
	{
		// Given
		turningSignals()

		// When
		raise completed

		// Then
		assert active (mrw.^statechart.RouteStatechart.main_region.Turning)
		assert active (mrw.^statechart.RouteStatechart.main_region.Turning.Turning_process.Section_Activation)
		assert called reset()
		assert called activateSections()
	}

	@Test
	operation activate()
	{
		// When
		sections()

		// When
		raise completed

		// Then
		assert active (mrw.^statechart.RouteStatechart.main_region.Active)
		assert activated
	}

	@Test
	operation extend()
	{
		// Given
		activate()

		// When
		raise extended

		// Then
		assert active (mrw.^statechart.RouteStatechart.main_region.Turning)
		assert active (mrw.^statechart.RouteStatechart.main_region.Turning.Turning_process.Switch_Turning)
		assert called reset()
		assert called turnSwitches()
	}

	@Test
	operation deactivate()
	{
		// Given
		activate()

		// When
		raise disable

		// Then
		disabled()
	}

	@Test
	operation finish()
	{
		// Given
		deactivate()

		// When
		raise completed

		// Then
		assert active (mrw.^statechart.RouteStatechart.main_region._final_)
		assert finished
		assert is_active
	}

	@Test
	operation timeout()
	{
		// Given
		deactivate()

		// When
		proceed timeout ms

		// Then
		assert active (mrw.^statechart.RouteStatechart.main_region._final_)
		assert finished
		assert is_active
	}

	@Test
	operation failActive()
	{
		// Given
		activate()

		// When
		raise failed

		// Then
		disabled()
	}

	@Test
	operation failTurningSwitches()
	{
		// Given
		switches()
		mock isCompleted returns (true)

		// When
		raise failed

		// Then
		disabled()
	}

	@Test
	operation failTurningSignals()
	{
		// Given
		turningSignals()
		mock isCompleted returns (true)

		// When
		raise failed

		// Then
		disabled()
	}

	@Test
	operation failTurningSections()
	{
		// Given
		sections()
		mock isCompleted returns (true)

		// When
		raise failed

		// Then
		disabled()
	}

	@Test
	operation failTurningSwitchesIncomplete()
	{
		// Given
		switches()
		mock isCompleted returns (false)

		// When
		raise failed

		// Then
		assert active (mrw.^statechart.RouteStatechart.main_region.Wait)
	}

	@Test
	operation failTurningSignalsIncomplete()
	{
		// Given
		turningSignals()
		mock isCompleted returns (false)

		// When
		raise failed

		// Then
		assert active (mrw.^statechart.RouteStatechart.main_region.Wait)
	}

	@Test
	operation failTurningSectionsIncomplete()
	{
		// Given
		sections()
		mock isCompleted returns (false)

		// When
		raise failed

		// Then
		assert active (mrw.^statechart.RouteStatechart.main_region.Wait)
	}

	@Test
	operation failWaitSwitches()
	{
		// Given
		failTurningSwitchesIncomplete()

		// When
		raise completed

		// Then
		disabled()
	}

	@Test
	operation failWaitSignals()
	{
		// Given
		failTurningSignalsIncomplete()

		// When
		raise completed

		// Then
		disabled()
	}

	@Test
	operation failWaitSections()
	{
		// Given
		failTurningSectionsIncomplete()

		// When
		raise completed

		// Then
		disabled()
	}

	@Test
	operation timeoutWaitSwitches()
	{
		// Given
		failTurningSwitchesIncomplete()

		// When
		proceed timeout ms

		// Then
		disabled()
	}

	@Test
	operation timeoutWaitSignals()
	{
		// Given
		failTurningSignalsIncomplete()

		// When
		proceed timeout ms

		// Then
		disabled()
	}

	@Test
	operation timeoutWaitSections()
	{
		// Given
		failTurningSectionsIncomplete()

		// When
		proceed timeout ms

		// Then
		disabled()
	}

	@Test
	operation timeoutTurningSwitches()
	{
		// Given
		switches()

		// When
		proceed timeout ms

		// Then
		assert active (mrw.^statechart.RouteStatechart.main_region.Emergency_Shutdown)

		// When
		proceed emergency ms

		// Then
		disabled()
	}

	@Test
	operation timeoutTurningSignals()
	{
		// Given
		turningSignals()

		// When
		proceed timeout ms

		// Then
		assert active (mrw.^statechart.RouteStatechart.main_region.Emergency_Shutdown)

		// When
		proceed emergency ms

		// Then
		disabled()
	}

	@Test
	operation timeoutTurningSections()
	{
		// Given
		sections()

		// When
		proceed timeout ms

		// Then
		assert active (mrw.^statechart.RouteStatechart.main_region.Emergency_Shutdown)

		// When
		proceed emergency ms

		// Then
		disabled()
	}
}
