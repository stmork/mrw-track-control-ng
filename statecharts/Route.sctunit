//
//  SPDX-License-Identifier: MIT
//  SPDX-FileCopyrightText: Copyright (C) 2008-2023 Steffen A. Mork
//

package mrw.test

testclass RouteTest for statechart mrw.^statechart.RouteStatechart
{
	operation disabled()
	{
		assert active (mrw.^statechart.RouteStatechart.main_region.Disable)
		assert called resetTransaction
		assert called deactivateSections
		assert called unlockSignals
		assert called unlockSwitches
		assert called tryComplete
	}

	@Test
	operation start()
	{
		enter
		assert  is_active
		assert !is_final
		assert active (mrw.^statechart.RouteStatechart.main_region.Start)
		
		mock resetTransaction
		mock fail
		mock tryComplete

		mock turnSwitches
		mock activateSections
		mock turnSignals
		mock extendSignals

		mock deactivateSections
		mock unlockSignals
		mock unlockSwitches
		mock unlockSections
	}

	@Test
	operation turningSwitches()
	{
		// Given
		start()

		// When
		raise extended

		// Then
		assert active (mrw.^statechart.RouteStatechart.main_region.Turning)
		assert active (mrw.^statechart.RouteStatechart.main_region.Turning.Turning_process.Switch_Turning)
		assert called resetTransaction
		assert called turnSwitches
		assert called tryComplete
	}

	@Test
	operation turningSignals()
	{
		// Given
		turningSwitches()

		// When
		raise completed

		// Then
		assert active (mrw.^statechart.RouteStatechart.main_region.Turning)
		assert active (mrw.^statechart.RouteStatechart.main_region.Turning.Turning_process.Signal_Turning)
		assert called resetTransaction
		assert called turnSignals
		assert called tryComplete
	}

	@Test
	operation extendingSignals()
	{
		// Given
		turningSignals()

		// When
		raise completed

		// Then
		assert active (mrw.^statechart.RouteStatechart.main_region.Turning)
		assert active (mrw.^statechart.RouteStatechart.main_region.Turning.Turning_process.Signal_Updating)
		assert called resetTransaction
		assert called tryComplete
		assert called extendSignals
	}

	@Test
	operation sections()
	{
		// Given
		extendingSignals()

		// When
		raise completed

		// Then
		assert active (mrw.^statechart.RouteStatechart.main_region.Turning)
		assert active (mrw.^statechart.RouteStatechart.main_region.Turning.Turning_process.Section_Activation)
		assert called resetTransaction
		assert called activateSections
		assert called tryComplete
	}

	@Test
	operation activate()
	{
		// When
		sections()

		// When
		raise completed

		// Then
		assert active (mrw.^statechart.RouteStatechart.main_region.Active)
		assert activated
	}

	@Test
	operation extend()
	{
		// Given
		activate()

		// When
		raise extended

		// Then
		assert active (mrw.^statechart.RouteStatechart.main_region.Turning)
		assert active (mrw.^statechart.RouteStatechart.main_region.Turning.Turning_process.Switch_Turning)
		assert called resetTransaction
		assert called turnSwitches
		assert called tryComplete
	}

	@Test
	operation deactivate()
	{
		// Given
		activate()

		// When
		raise disable

		// Then
		disabled()
	}

	@Test
	operation unlock()
	{
		// Given
		deactivate()

		// When
		raise completed

		// Then
		assert active (mrw.^statechart.RouteStatechart.main_region.Unlock)
		assert called resetTransaction
		assert called unlockSections
		assert called tryComplete
	}

	@Test
	operation finish()
	{
		// Given
		unlock()

		// When
		raise completed

		// Then
		assert active (mrw.^statechart.RouteStatechart.main_region._final_)
		assert finished
		assert is_active
	}

	@Test
	operation timeout()
	{
		// Given
		deactivate()

		// When
		proceed emergency ms

		// Then
		assert active (mrw.^statechart.RouteStatechart.main_region._final_)
		assert finished
		assert is_active
	}

	@Test
	operation failActive()
	{
		// Given
		activate()

		// When
		raise failed

		// Then
		disabled()
	}

	@Test
	operation failTurningSwitches()
	{
		// Given
		turningSwitches()
		mock isCompleted returns (true)

		// When
		raise failed

		// Then
		disabled()
	}

	@Test
	operation failTurningSignals()
	{
		// Given
		turningSignals()
		mock isCompleted returns (true)

		// When
		raise failed

		// Then
		disabled()
	}

	@Test
	operation failExtendingSignals()
	{
		// Given
		extendingSignals()
		mock isCompleted returns (true)

		// When
		raise failed

		// Then
		disabled()
	}

	@Test
	operation failTurningSections()
	{
		// Given
		sections()
		mock isCompleted returns (true)

		// When
		raise failed

		// Then
		disabled()
	}

	@Test
	operation failTurningSwitchesIncomplete()
	{
		// Given
		turningSwitches()
		mock isCompleted returns (false)

		// When
		raise failed

		// Then
		assert active (mrw.^statechart.RouteStatechart.main_region.Wait)
	}

	@Test
	operation failTurningSignalsIncomplete()
	{
		// Given
		turningSignals()
		mock isCompleted returns (false)

		// When
		raise failed

		// Then
		assert active (mrw.^statechart.RouteStatechart.main_region.Wait)
	}

	@Test
	operation failExtendingSignalsIncomplete()
	{
		// Given
		extendingSignals()
		mock isCompleted returns (false)

		// When
		raise failed

		// Then
		assert active (mrw.^statechart.RouteStatechart.main_region.Wait)
	}

	@Test
	operation failTurningSectionsIncomplete()
	{
		// Given
		sections()
		mock isCompleted returns (false)

		// When
		raise failed

		// Then
		assert active (mrw.^statechart.RouteStatechart.main_region.Wait)
	}

	@Test
	operation failWaitSwitches()
	{
		// Given
		failTurningSwitchesIncomplete()

		// When
		raise completed

		// Then
		disabled()
	}

	@Test
	operation failWaitSignals()
	{
		// Given
		failTurningSignalsIncomplete()

		// When
		raise completed

		// Then
		disabled()
	}

	@Test
	operation failWaitSections()
	{
		// Given
		failTurningSectionsIncomplete()

		// When
		raise completed

		// Then
		disabled()
	}

	@Test
	operation timeoutWaitSwitches()
	{
		// Given
		failTurningSwitchesIncomplete()

		// When
		proceed emergency ms

		// Then
		disabled()
	}

	@Test
	operation timeoutWaitSignals()
	{
		// Given
		failTurningSignalsIncomplete()

		// When
		proceed emergency ms

		// Then
		disabled()
	}

	@Test
	operation timeoutWaitSections()
	{
		// Given
		failTurningSectionsIncomplete()

		// When
		proceed emergency ms

		// Then
		disabled()
	}

	@Test
	operation timeoutTurningSwitches()
	{
		// Given
		turningSwitches()

		// When
		proceed switch_timeout ms

		// Then
		assert active (mrw.^statechart.RouteStatechart.main_region.Emergency_Shutdown)
		assert called deactivateSections
		assert called unlockSignals

		// When
		proceed emergency ms

		// Then
		disabled()
	}

	@Test
	operation timeoutTurningSignals()
	{
		// Given
		turningSignals()

		// When
		proceed signal_timeout ms

		// Then
		assert active (mrw.^statechart.RouteStatechart.main_region.Emergency_Shutdown)
		assert called deactivateSections
		assert called unlockSignals

		// When
		proceed emergency ms

		// Then
		disabled()
	}

	@Test
	operation timeoutExtendingSignals()
	{
		// Given
		extendingSignals()

		// When
		proceed signal_timeout ms

		// Then
		assert active (mrw.^statechart.RouteStatechart.main_region.Emergency_Shutdown)
		assert called deactivateSections
		assert called unlockSignals

		// When
		proceed emergency ms

		// Then
		disabled()
	}

	@Test
	operation emergencySections()
	{
		// Given
		sections()

		// When
		proceed section_timeout ms

		// Then
		assert active (mrw.^statechart.RouteStatechart.main_region.Emergency_Shutdown)
		assert called deactivateSections
		assert called unlockSignals
	}
	@Test

	operation timeoutTurningSections()
	{
		// Given
		emergencySections()

		// When
		proceed emergency ms

		// Then
		disabled()
	}

	@Test
	operation doExit()
	{
		enter
		assert is_active

		exit
		assert !is_active

		start()
		exit
		assert !is_active

		turningSwitches()
		exit
		assert !is_active

		turningSignals()
		exit
		assert !is_active

		extendingSignals()
		exit
		assert !is_active

		sections()
		exit
		assert !is_active

		activate()
		exit
		assert !is_active

		deactivate()
		exit
		assert !is_active

		unlock()
		exit
		assert !is_active

		finish()
		exit
		assert !is_active

		emergencySections()
		exit
		assert !is_active

		failTurningSectionsIncomplete()
		exit
		assert !is_active
	}
}
